<?php
require_once __DIR__ . '/includes/bootstrap.php';

// includes/security.php
// Helper utilities: CSRF tokens, password helpers, PDO wrapper template, upload helper.
// Drop this into your project and include where needed: require_once __DIR__.'/security.php';

session_start();

// CSRF helpers
function csrf_token() {
    if (empty($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
    return $_SESSION['csrf_token'];
}
function csrf_field() {
    $t = htmlspecialchars(csrf_token(), ENT_QUOTES, 'UTF-8');
    return '<input type="hidden" name="csrf" value="'.$t.'">';
}
function csrf_check() {
    $ok = isset($_POST['csrf']) && hash_equals($_SESSION['csrf_token'] ?? '', $_POST['csrf']);
    if (!$ok) {
        http_response_code(403);
        echo "CSRF validation failed.";
        exit;
    }
    return true;
}

// Password helpers that are backward-compatible
function safe_hash($password) {
    return password_hash($password, PASSWORD_DEFAULT);
}
function safe_verify($password, $stored_hash) {
    if (!$stored_hash) return false;
    // If stored hash looks like a modern password_hash (starts with $2y$ or $argon)
    if (strpos($stored_hash, '$2y$') === 0 || strpos($stored_hash, '$argon') === 0 || strpos($stored_hash, '$2a$') === 0) {
        return password_verify($password, $stored_hash);
    }
    // Legacy MD5 (32 chars hex)
    if (preg_match('/^[a-f0-9]{32}$/i', $stored_hash)) {
        return md5($password) === $stored_hash;
    }
    // Legacy SHA1 (40 chars hex)
    if (preg_match('/^[a-f0-9]{40}$/i', $stored_hash)) {
        return sha1($password) === $stored_hash;
    }
    // Fallback: try password_verify anyway
    return password_verify($password, $stored_hash);
}

// PDO wrapper template - adapt DSN/credentials in your config and use secure queries.
// Example usage:
// $pdo = db_connect();
// $stmt = $pdo->prepare('SELECT * FROM users WHERE id = ?');
// $stmt->execute([$id]);
function db_connect() {
    static $pdo = null;
    if ($pdo) return $pdo;
    // Try to pick up existing config if present
    $host = defined('DB_HOST') ? DB_HOST : getenv('DB_HOST') ?: 'localhost';
    $db   = defined('DB_NAME') ? DB_NAME : getenv('DB_NAME') ?: 'tasarimal';
    $user = defined('DB_USER') ? DB_USER : getenv('DB_USER') ?: 'root';
    $pass = defined('DB_PASS') ? DB_PASS : getenv('DB_PASS') ?: '';
    $charset = 'utf8mb4';
    $dsn = "mysql:host=$host;dbname=$db;charset=$charset";
    $opt = [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    ];
    try {
        $pdo = new PDO($dsn, $user, $pass, $opt);
    } catch (Exception $e) {
        // In production do not echo sensitive info
        error_log("DB connect failed: ".$e->getMessage());
        throw $e;
    }
    return $pdo;
}

// Secure upload helper
function secure_upload($file_field, $allowed_mimes = ['image/jpeg','image/png','application/pdf'], $max_bytes = 5*1024*1024) {
    if (!isset($_FILES[$file_field])) {
        throw new Exception('No file uploaded');
    }
    $f = $_FILES[$file_field];
    if ($f['error'] !== UPLOAD_ERR_OK) {
        throw new Exception('Upload error code: '.$f['error']);
    }
    if ($f['size'] > $max_bytes) {
        throw new Exception('File too large');
    }
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mime = finfo_file($finfo, $f['tmp_name']);
    finfo_close($finfo);
    if (!in_array($mime, $allowed_mimes)) {
        throw new Exception('Invalid file type: '.$mime);
    }
    $ext = pathinfo($f['name'], PATHINFO_EXTENSION);
    $safe_name = bin2hex(random_bytes(16)).'.'.preg_replace('/[^a-zA-Z0-9]/','',substr($ext,0,8));
    $upload_dir = __DIR__ . '/../uploads';
    if (!is_dir($upload_dir)) mkdir($upload_dir, 0755, true);
    $target = $upload_dir . '/' . $safe_name;
    if (!move_uploaded_file($f['tmp_name'], $target)) {
        throw new Exception('Failed to move uploaded file');
    }
    // return relative path to saved file
    return 'uploads/' . $safe_name;
}
?>